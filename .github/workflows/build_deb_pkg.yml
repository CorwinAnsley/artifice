# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Ubuntu/Debian build

on:
  push:
    tags:
      - '*'
env:
  APPLICATION_NAME: piranhaGUI

permissions:
  contents: write

jobs:
  build_release:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        echo ls
        python -m pip install --upgrade pip
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        $CONDA/bin/conda env update --file artifice/environment.yml --name base
    #- name: Lint with flake8
    #  run: |
    #    $CONDA/bin/conda install flake8
    #    # stop the build if there are Python syntax errors or undefined names
    #    $CONDA/bin/flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    $CONDA/bin/flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistic
    #- name: Test with pytest
    #  run: |
    #    pytest
    - name: increment version number
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        python artifice/update_version_number.py ${{ github.ref_name }} piranhaGUI
        git add *
        git commit -m"incrementing version number
        git push origin master
    - name: build package
      run: |
        $CONDA/bin/conda source artifice/linux_build/create_deb_package
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: true
        release_name: ${{ env.APPLICATION_NAME }} v${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        body_path: ''
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: upload ubuntu/debian package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifice/linux_build/pkg_file/${{ env.APPLICATION_NAME }}_${{ github.ref_name }}.deb
        asset_name: ${{ env.APPLICATION_NAME }}_${{ github.ref_name }}.deb
        asset_content_type: application/vnd.debian.binary-package
  
    
